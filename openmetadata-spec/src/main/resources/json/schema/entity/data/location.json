{
  "$id": "https://open-metadata.org/schema/entity/data/location.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Location",
  "description": "This schema defines the Location entity. A Location can contain the data of a table or group other subLocation together.",
  "type": "object",
  "javaType": "org.openmetadata.schema.entity.data.Location",
  "javaInterfaces": ["org.openmetadata.schema.EntityInterface"],
  "definitions": {
    "entityName": {
      "description": "Name of a location",
      "type": "string",
      "minLength": 1,
      "maxLength": 128,
      "pattern": "^((?!::).)*$"
    },
    "locationType": {
      "javaType": "org.openmetadata.schema.type.LocationType",
      "description": "This schema defines the type used for describing different types of Location.",
      "type": "string",
      "enum": ["Bucket", "Prefix", "Database", "Table", "Iceberg"],
      "javaEnums": [
        {
          "name": "Bucket"
        },
        {
          "name": "Prefix"
        },
        {
          "name": "Database"
        },
        {
          "name": "Table"
        },
        {
          "name": "Iceberg"
        }
      ]
    }
  },
  "properties": {
    "id": {
      "description": "Unique identifier of this location instance.",
      "$ref": "../../type/basic.json#/definitions/uuid"
    },
    "name": {
      "$ref" : "#/definitions/entityName"
    },
    "path": {
      "description": "Location full path",
      "type": "string"
    },
    "displayName": {
      "description": "Display Name that identifies this table. It could be title or label from the source services.",
      "type": "string"
    },
    "fullyQualifiedName": {
      "description": "Fully qualified name of a location in the form `serviceName.locationName`.",
      "$ref": "../../type/basic.json#/definitions/fullyQualifiedEntityName"
    },
    "description": {
      "description": "Description of a location.",
      "$ref": "../../type/basic.json#/definitions/markdown"
    },
    "version": {
      "description": "Metadata version of the entity.",
      "$ref": "../../type/entityHistory.json#/definitions/entityVersion"
    },
    "updatedAt": {
      "description": "Last update time corresponding to the new version of the entity in Unix epoch time milliseconds.",
      "$ref": "../../type/basic.json#/definitions/timestamp"
    },
    "updatedBy": {
      "description": "User who made the update.",
      "type": "string"
    },
    "href": {
      "description": "Link to this location resource.",
      "$ref": "../../type/basic.json#/definitions/href"
    },
    "locationType": {
      "$ref": "#/definitions/locationType"
    },
    "owner": {
      "description": "Owner of this location.",
      "$ref": "../../type/entityReference.json",
      "default": null
    },
    "followers": {
      "description": "Followers of this location.",
      "$ref": "../../type/entityReference.json#/definitions/entityReferenceList"
    },
    "tags": {
      "description": "Tags for this location.",
      "type": "array",
      "items": {
        "$ref": "../../type/tagLabel.json"
      },
      "default": null
    },
    "service": {
      "description": "Link to the database service where this database is hosted in.",
      "$ref": "../../type/entityReference.json"
    },
    "serviceType": {
      "description": "Service type where this storage location is hosted in.",
      "$ref": "../../type/storage.json#/definitions/storageServiceType"
    },
    "changeDescription": {
      "description": "Change that lead to this version of the entity.",
      "$ref": "../../type/entityHistory.json#/definitions/changeDescription"
    },
    "deleted": {
      "description": "When `true` indicates the entity has been soft deleted.",
      "type": "boolean",
      "default": false
    }
  },
  "required": ["name", "service"],
  "additionalProperties": false
}
