{
  "$id": "https://open-metadata.org/schema/metadataIngestion/databaseServiceMetadataPipeline.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "DatabaseServiceMetadataPipeline",
  "description": "DatabaseService Metadata Pipeline Configuration.",
  "javaType": "org.openmetadata.schema.metadataIngestion.DatabaseServiceMetadataPipeline",
  "definitions": {
    "databaseMetadataConfigType": {
      "description": "Database Source Config Metadata Pipeline type",
      "type": "string",
      "enum": ["DatabaseMetadata"],
      "default": "DatabaseMetadata"
    }
  },
  "properties": {
    "type": {
      "description": "Pipeline type",
      "$ref": "#/definitions/databaseMetadataConfigType",
      "default": "DatabaseMetadata"
    },
    "markDeletedTables": {
      "description": "Optional configuration to soft delete tables in OpenMetadata if the source tables are deleted. Also, if the table is deleted, all the associated entities like testSuite, lineage, etc., with that table will be deleted",
      "type": "boolean",
      "default": true
    },
    "markAllDeletedTables": {
      "description": "Optional configuration to mark all deleted tables to the filtered schema",
      "type": "boolean",
      "default": false
    },
    "includeTables": {
      "description": "Optional configuration to turn off fetching metadata for tables.",
      "type": "boolean",
      "default": true
    },
    "includeViews": {
      "description": "Optional configuration to turn off fetching metadata for views.",
      "type": "boolean",
      "default": true
    },
    "includeTags": {
      "description": "Optional configuration to turn off fetching metadata for tags.",
      "type": "boolean",
      "default": true
    },
    "useFqnForFiltering": {
      "description": "Regex will be applied on fully qualified name (e.g service_name.db_name.schema_name.table_name) instead of raw name (e.g. table_name)",
      "type": "boolean",
      "default": false
    },
    "schemaFilterPattern": {
      "description": "Regex to only fetch tables or databases that matches the pattern.",
      "$ref": "../type/filterPattern.json#/definitions/filterPattern"
    },
    "tableFilterPattern": {
      "description": "Regex exclude tables or databases that matches the pattern.",
      "$ref": "../type/filterPattern.json#/definitions/filterPattern"
    },
    "databaseFilterPattern": {
      "description": "Regex to only fetch databases that matches the pattern.",
      "$ref": "../type/filterPattern.json#/definitions/filterPattern"
    }
  },
  "additionalProperties": false
}
