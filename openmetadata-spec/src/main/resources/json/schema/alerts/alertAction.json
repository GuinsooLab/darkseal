{
  "$id": "https://open-metadata.org/schema/alerts/alertAction.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AlertAction",
  "description": "Describes an Alert Action Config",
  "type": "object",
  "javaType": "org.openmetadata.schema.entity.alerts.AlertAction",
  "javaInterfaces": ["org.openmetadata.schema.EntityInterface"],
  "definitions": {
    "alertActionType": {
      "description": "Alert Action Type",
      "type": "string",
      "enum": [
        "GenericWebhook",
        "SlackWebhook",
        "MsTeamsWebhook",
        "Email",
        "ActivityFeed"
      ]
    },
    "status": {
      "description": "Status is `disabled`, when webhook was created with `enabled` set to false and it never started publishing events. Status is `active` when webhook is normally functioning and 200 OK response was received for callback notification. Status is `failed` on bad callback URL, connection failures, `1xx`, and `3xx` response was received for callback notification. Status is `awaitingRetry` when previous attempt at callback timed out or received `4xx`, `5xx` response. Status is `retryLimitReached` after all retries fail.",
      "type": "string",
      "enum": [
        "disabled",
        "failed",
        "retryLimitReached",
        "awaitingRetry",
        "active"
      ]
    },
    "failureDetails": {
      "description": "Failure details are set only when `status` is not `success`.",
      "type": "object",
      "javaType": "org.openmetadata.schema.type.FailureDetails",
      "properties": {
        "lastFailedAt": {
          "description": "Last non-successful callback time in UNIX UTC epoch time in milliseconds.",
          "$ref": "../type/basic.json#/definitions/timestamp"
        },
        "lastFailedStatusCode": {
          "description": "Last non-successful activity response code received during callback.",
          "type": "integer"
        },
        "lastFailedReason": {
          "description": "Last non-successful activity response reason received during callback.",
          "type": "string"
        },
        "nextAttempt": {
          "description": "Next retry will be done at this time in Unix epoch time milliseconds. Only valid is `status` is `awaitingRetry`.",
          "$ref": "../type/basic.json#/definitions/timestamp"
        }
      },
      "additionalProperties": false
    },
    "activityFeedAlertActionConfig": {
      "description": "Activity Feed Alert Action Config",
      "type": "object",
      "javaType": "org.openmetadata.schema.entity.alerts.ActivityFeedAlertActionConfig",
      "properties": {
        "name": {
          "description": "Name",
          "type": "string"
        },
        "description": {
          "description": "Description",
          "type": "string"
        }
      }
    },
    "alertActionStatus": {
      "description": "Alert Action Current Status",
      "type": "object",
      "javaType": "org.openmetadata.schema.entity.alerts.AlertActionStatus",
      "properties": {
        "status": {
          "$ref": "#/definitions/status"
        },
        "failureDetails": {
          "$ref": "#/definitions/failureDetails"
        },
        "lastSuccessfulAt": {
          "description": "Last non-successful callback time in UNIX UTC epoch time in milliseconds.",
          "$ref": "../type/basic.json#/definitions/timestamp"
        },
        "timestamp": {
          "$ref": "../type/basic.json#/definitions/timestamp"
        }
      },
      "additionalProperties": false
    }
  },
  "properties": {
    "id": {
      "description": "Unique identifier that identifies this Alert.",
      "$ref": "../type/basic.json#/definitions/uuid"
    },
    "name": {
      "description": "Name that uniquely identifies this Alert.",
      "$ref": "../type/basic.json#/definitions/entityName"
    },
    "fullyQualifiedName": {
      "description": "Name that uniquely identifies a Alert.",
      "$ref": "../type/basic.json#/definitions/entityName"
    },
    "displayName": {
      "description": "Display name for this Alert.",
      "type": "string"
    },
    "description": {
      "description": "A short description of the Alert, comprehensible to regular users.",
      "$ref": "../type/basic.json#/definitions/markdown"
    },
    "owner": {
      "description": "Owner of this Alert.",
      "$ref": "../type/entityReference.json",
      "default": null
    },
    "href": {
      "description": "Link to the resource corresponding to this entity.",
      "$ref": "../type/basic.json#/definitions/href"
    },
    "enabled": {
      "description": "Is the alert enabled.",
      "type": "boolean",
      "default": true
    },
    "version": {
      "description": "Metadata version of the Alert.",
      "$ref": "../type/entityHistory.json#/definitions/entityVersion"
    },
    "updatedAt": {
      "description": "Last update time corresponding to the new version of the Alert in Unix epoch time milliseconds.",
      "$ref": "../type/basic.json#/definitions/timestamp"
    },
    "updatedBy": {
      "description": "User who made the update.",
      "type": "string"
    },
    "changeDescription": {
      "description": "Change that led to this version of the Alert.",
      "$ref": "../type/entityHistory.json#/definitions/changeDescription"
    },
    "alertActionType": {
      "$ref": "#/definitions/alertActionType"
    },
    "batchSize": {
      "description": "Maximum number of events sent in a batch (Default 10).",
      "type": "integer",
      "default": 10
    },
    "timeout": {
      "description": "Connection timeout in seconds. (Default 10s).",
      "type": "integer",
      "default": 10
    },
    "readTimeout": {
      "description": "Read timeout in seconds. (Default 12s).",
      "type": "integer",
      "default": 12
    },
    "statusDetails": {
      "$ref": "#/definitions/alertActionStatus"
    },
    "alertActionConfig": {
      "oneOf": [
        {
          "$ref": "../entity/events/webhook.json"
        },
        {
          "$ref": "./emailAlertConfig.json"
        },
        {
          "$ref": "#/definitions/activityFeedAlertActionConfig"
        }
      ]
    },
    "deleted": {
      "description": "When `true` indicates the entity has been soft deleted.",
      "type": "boolean",
      "default": false
    },
    "provider" : {
      "$ref": "../type/basic.json#/definitions/providerType"
    }
  },
  "required": ["name", "alertActionType", "alertActionConfig"],
  "additionalProperties": false
}
