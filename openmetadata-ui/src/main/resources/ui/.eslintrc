/*
 *  Copyright 2021 Collate
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

{
  "root": true,
  "env": {
    "browser": true,
    "es6": true,
    "jest": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "prettier",
    "prettier/react",
    "plugin:prettier/recommended",
    "plugin:jest/recommended",
    "plugin:jest-formatting/recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier/@typescript-eslint"
  ],
  "globals": {
    "Atomics": "readonly",
    "SharedArrayBuffer": "readonly",
    "jest": true
  },
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 2018,
    "sourceType": "module"
  },
  "parser": "@typescript-eslint/parser",
  "plugins": [
    "react",
    "jest",
    "react-hooks",
    "jest-formatting",
    "@typescript-eslint"
  ],
  "rules": {
    "import/extensions": 0,

    "import/no-named-as-default-member": 0,
    "react/prop-types": 1,
    "react/display-name": 0,

    // Require a whitespace at the beginning of a comment
    "spaced-comment": ["error", "always"],

    // Maximum line length for comments
    // Trailing comments allowed beyond maximum line length
    "max-len": [
      "error",
      {
        "code": 200,
        "comments": 120,
        "ignoreTrailingComments": true,
        "tabWidth": 2
      }
    ],

    // Require PascalCase for user-defined JSX components
    "react/jsx-pascal-case": ["error"],

    // Console logs cannot be committed.
    "no-console": ["error"],

    // Require props to be sorted
    "react/jsx-sort-props": [
      "error",
      { "callbacksLast": true, "shorthandFirst": true }
    ],

    // Omit boolean prop value when set to true
    "react/jsx-boolean-value": ["error", "never"],

    // Require self closing tags in JSX/HTML
    "react/self-closing-comp": ["error", { "component": true, "html": true }],

    // Disallow unnecessary curly braces in JSX
    "react/jsx-curly-brace-presence": ["error", "never"],

    // Require blank line before certain statements
    "padding-line-between-statements": [
      "error",
      { "blankLine": "always", "prev": "*", "next": "function" },
      { "blankLine": "always", "prev": "*", "next": "class" },
      { "blankLine": "always", "prev": "*", "next": "export" },
      // Ignore consecutive export statements
      { "blankLine": "any", "prev": "export", "next": "export" },
      { "blankLine": "always", "prev": "*", "next": "return" },
      { "blankLine": "always", "prev": "*", "next": "break" },
      { "blankLine": "always", "prev": "*", "next": "continue" },
      { "blankLine": "always", "prev": "*", "next": "throw" }
    ],

    // eslint-plugin-react-hooks rules
    "react-hooks/rules-of-hooks": "error",
    // "react-hooks/exhaustive-deps": "warn",

    // eslint-plugin-jest rules

    // Prefer "it" over "test"
    "jest/consistent-test-it": [
      "error",
      { "fn": "it", "withinDescribe": "it" }
    ],

    // eslint-plugin-jest-formatting rules

    // Require blank line before certain statements (ESLint rules don't work with Jest)
    "jest-formatting/padding-around-all": "error",
    "jest-formatting/padding-around-test-blocks": "error",

    // @typescript-eslint rules

    // Require explicit return type on functions and class methods
    "@typescript-eslint/explicit-function-return-type": "off",
    // [
    //   "warn",
    //   { "allowExpressions": true }
    // ],

    // Requires Camelcase for identifiers
    "@typescript-eslint/camelcase": "warn",

    // Requires PascalCase for Class and Interface names
    "@typescript-eslint/class-name-casing": "error",

    // Restricts explicitely using type any
    "@typescript-eslint/no-explicit-any": "error",

    // Restricts use of non-null assertions using the "!" postfix operator
    "@typescript-eslint/no-non-null-assertion": "error",

    // Define entities before using
    "@typescript-eslint/no-use-before-define": [
      "error",
      { "functions": true, "classes": true }
    ]
  },
  "settings": {
    "import/resolver": {
      "babel-module": {
        "root": ["./src"],
        "extensions": [".js", ".jsx", ".png", ".svg"]
      }
    },
    "react": {
      "version": "detect"
    }
  }
}
